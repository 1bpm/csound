#								Csound Makefile
# edit the following definitions according to need:

INCLUDE	= @includedir@
LIB	= @datadir@
DEST	= @bindir@
MAN	= @mandir@
MAN1	= $(MAN)/man1
CAT1	= $(MAN)/cat1
# these directories must exist for stages beyond 'make csound'

CDEP =
COBS =	$(COBJS)
CC = @CC@
# choose either -
#	CDEP =			for UNIX
#	COBS = $(COBJS)
#	CC = cc
# or -
#	CDEP = $(CRFILE)	for MSDOS
#	COBS = @$(CDEP)
#	CC = gcc
#	.c.$(o):
#		$(CC) $(CFLAGS) -c $*.c -o $@

DEFINES = -DBETA
# In autoconf stuff
# choose any of -
#	-DWINDOWS   include window system calls (X11, SGI, or FG graphics)
#	-DRTAUDIO   include real-time sound i/o via DEC or other audio-board
#	-DHAVE_FLTK include FLTK widgets (requires FLTK 1.1.x)
#	-DHPUX -D_HPUX_SOURCE	for HP compilation under HP Unix
#	-DPIPES     if system supports popen and pclose calls
# at most one of -
#	-DSFIRCAM   read/write IRCAM-format soundfiles, with 1024-byte header;
#	-DSFSUN41   read/write SUN4.1-format soundfiles, with their own header;
#	-DNeXT      read/write NeXT-format soundfiles, with their own header;
#			(else read/write sound with no headers)
# and at most one of -
#	-DDEC		send rtaudio calls to DEC audio device handler
#	-DSGI		send rtaudio calls to SGI audio device handler
#	-Dsun		send rtaudio calls to sun audio device handler
#	-Dsol		send rtaudio calls to solaris audio handler
#	-DHP		send rtaudio calls to HP  audio device handler
#	-DLINUX		send rtaudio calls to Linux audio device handler
# Defining LINUX also enables an additional command-line option (-V <volume>)
# and includes an extra header in 'midirecv.c'.
# If LINUX is defined, but the target is Linux on a big-endian architecture
# (e.g., Linux on SPARC [not tested]), you should also define -
#       -DLINUX_BE      Linux audio device handler for big-endian samples

CFLAGS = @CFLAGS@ @XCFLAGS@ $(RPM_OPT_FLAGS) $(DEFINES)
#	-O		Simple optimisation
#	-O2		to be more specific about the optimization level
#	-f		compile single-precision floats (4.3,VAX,DEC-RISC)
# 	-fsingle	as above, for SUN Unix
# 	-float -cckr 	as above, for SGI Unix
#	-f68881		employ the 68881 co-processor
#	-ffpa		employ the SUN fl-pt accelerator
#	-f -DWITHx87	for PC with 80x87 floating-point coprocessor
#	-w -D__STDC__	for PC
#	-Aa		for HP to invoke ANSI C compiler
#	+e		for HPUX rtaudio compilation
#	+x		generate HP inline 68020 and 68881 code
#	+Nd1200		expand SYS5 pass3 tablesize
#	-DWITHx87	for fpt chip on LINUX
#	-march=i586 -mcpu=i686	Recommended for GNU/Linux is PentiumIII/Athlon.#
#			Still not clear for which processor this works
#	-malign-loops=4	Recommended for GNU/Linux
#	-malign-jumps=4	Recommended for GNU/Linux
#       -malign-functions=4
#       -fno-gcse -fno-strict-aliasing    (recommended bug-arounds for gcc 2.9x)
#       -mfancy-math-387                  (may not be necessary, but safe to add)
#       -ffast-math                       produces faster and smaller code, not
#						 fully tested:
#   these produce larger code, but may (or may not) be faster:
#     -fomit-frame-pointer
#     -finline-functions                  (N.B. do not use this with gcc 2.95.2)
#     -funroll-loops                      (unfortunately this option generates
#                                           much larger executables)
#	-I/usr/demo/SOUND		to find SUN4.1 audio includes
#	-I/usr/include/X11R4		to find HP X11 includes, v.4
#	-I/usr/include/sys		to find NeXT malloc.h
#	-I/usr/openwin/include		Solaris openwin interface
#	-I/usr/demo/SOUND/include	Solaris sound interface
#       -I/usr/X11R6/include            non-RedHat distributions of Linux

# uncomment these if HAVE_FLTK was enabled in DEFINES
#
CXX = @CXX@
o = @OBJEXT@
# source and object files for FLTK widgets
CXXFLAGS = -I H -fno-exceptions -fno-rtti @WINCXXFLAGS@
FLTKSRC = @FLTKSRC@
FLTKOBJ = @FLTKOBJ@
#FLTKLIB = -lfltk -lpthread -lg++
FLTKLIB = @WINLDFLAGS@
# libraries required by widgets.cpp
#	/usr/lib/libpthread.a			suitable for distribution,
#	/usr/lib/libstdc++-libc6.2-2.a.3	but increases size; the
#						directiories and version
#						numbers are system-dependent)

LIBS =	$(FLTKLIB) @X_LIBS@ @LIBS@
#	-lefence

WINSRC = @WINSRC@
WINOBJ = @WINOBJ@

AUDSRC = @AUDSRC@
AUDOBJ = @AUDOBJ@
AUDHDR = @AUDHDR@

# The Csound MAKE can be run in separate stages, or as a single command.
# To create just the 'csound' executable, type
#	make csound
# This module contains most of the functions below as Utility options
# (see the Csound manual), but they are also available as standalones:

# To create the standalone 'hetro', 'lpanal', 'pvanal', type
#	make hetro
#	make lpanal
#	make pvanal
# To create all three standalones, type
#	make anals

# To create standalone 'scot', 'cscore', 'scsort', 'extract', type
#	make scots
#	make cscores
#	make scsort
#	make extract
# To create all four standalones, type
#	make utils1

# To create standalone 'sndinfo', type
#	make sndinfo
# or
#	make utils2

# To create all the above, from 'csound' to 'utils2', type
#	make all

# If you have completed the above, and have defined the INCLUDE, LIB & DEST
# directories, you can now install all the executables in a single command:
#	make install

# do not edit below this line
# --------------------------------------------------------------------------

# macros passed to lower-level Makefile files
#
MAC = "DEFINES=$(DEFINES)"

MAKE = make $(MAC)

SHELL = @SHELL@
E     = Engine
I     = InOut
T     = Top
O     = OOps

CSRCM  = cscormai.c natbem.c

CSRCE = \
	$E/auxfd.c	\
	$E/entry1.c	\
	$E/entry2.c	\
	$E/express.c	\
	$E/extract.c	\
	$E/fgens.c	\
	$E/filopen.c	\
	$E/insert.c	\
	$E/linevent.c	\
	$E/memalloc.c	\
	$E/memfiles.c	\
	$E/musmon.c	\
	$E/namedins.c	\
	$E/oload.c	\
	$E/otran.c	\
	$E/rdorch.c	\
	$E/rdscor.c	\
	$E/scsort.c	\
	$E/scxtract.c	\
	$E/sort.c	\
	$E/sread.c	\
	$E/swrite.c	\
	$E/twarp.c

CSRCI = \
	$I/aifc.c       \
	$I/aiff.c       \
	$I/ieee80.c     \
	$I/sfheader.c   \
	$I/soundin.c    \
	$I/soundio.c    \
	$I/wave.c       \
	$I/winEPS.c     \
	$I/winascii.c   \
	$I/windin.c     \
	$I/window.c

CSRCT = \
	$T/argdecode.c	\
	$T/cscore.c	\
	$T/cscorfns.c	\
	$T/cvanal.c	\
	$T/dnoise.c 	\
	$T/getstring.c	\
	$T/hetro.c	\
	$T/jpff_glue.c	\
	$T/lpanal.c	\
	$T/main.c	\
	$T/one_file.c	\
	$T/opcode.c	\
	$T/pvanal.c	\
	$T/pvlook.c	\
	$T/sndinfo.c	\
	$T/scot.c


CSRCO = \
	$O/aops.c	\
	$O/cmath.c	\
	$O/control.c	\
	$O/diskin.c	\
	$O/disprep.c	\
	$O/dnfft.c	\
	$O/dsputil.c	\
	$O/dumpf.c	\
	$O/fft.c	\
	$O/fout.c	\
	$O/lptrkfns.c	\
	$O/mididevice.c	\
	$O/midiinterop.c	\
	$O/midiops.c	\
	$O/midiout.c	\
	$O/midirecv.c	\
	$O/midisend.c	\
	$O/mxfft.c	\
	$O/oscils.c	\
	$O/pitch0.c	\
	$O/pstream.c	\
	$O/pvadd.c	\
	$O/pvfileio.c	\
	$O/pvinterp.c	\
	$O/pvoc.c	\
	$O/pvocext.c	\
	$O/pvread.c	\
	$O/pvsanal.c	\
	$O/pvxanal.c	\
	$O/schedule.c	\
	$O/sdif.c	\
	$O/sdif-mem.c	\
	$O/sndinfUG.c	\
	$O/ugens1.c	\
	$O/ugens2.c	\
	$O/ugens3.c	\
	$O/ugens4.c	\
	$O/ugens5.c	\
	$O/ugens6.c	\
	$O/ugens7.c	\
	$O/ugens8.c	\
	$O/ugens9.c	\
	$O/vbap.c	\
	$O/vbap_eight.c	\
	$O/vbap_four.c	\
	$O/vbap_sixteen.c	\
	$O/vbap_zak.c	\
	$O/vdelay.c	\
	$O/vpvoc.c

CSRCS =	$(CSRCT) $(CSRCI) $(CSRCO) $(CSRCE) $(WINSRC) $(AUDSRC) $(FLTKSRC)

COBJM  = cscormai.$(o) natben.$(o)

COBJE = \
	auxfd.$(o)	\
	entry1.$(o)	\
	entry2.$(o)	\
	express.$(o)	\
	extract.$(o)	\
	fgens.$(o)	\
	filopen.$(o)	\
	insert.$(o)	\
	linevent.$(o)	\
	memalloc.$(o)	\
	memfiles.$(o)	\
	musmon.$(o)	\
	namedins.$(o)	\
	oload.$(o)	\
	otran.$(o)	\
	rdorch.$(o)	\
	rdscor.$(o)	\
	scsort.$(o)	\
	scxtract.$(o)	\
	sort.$(o)	\
	sread.$(o)	\
	swrite.$(o)	\
	twarp.$(o)

COBJI = winascii.$(o) window.$(o) windin.$(o) winEPS.$(o) aiff.$(o) wave.$(o) \
	ieee80.$(o) sfheader.$(o) soundin.$(o) soundio.$(o) aifc.$(o)

COBJT = \
	argdecode.$(o)	\
	cscore.$(o)	\
	cscorfns.$(o)	\
	cvanal.$(o)	\
	dl_opcodes.$(o)	\
	dnoise.$(o) 	\
	getstring.$(o)	\
	hetro.$(o)	\
	jpff_glue.$(o)	\
	lpanal.$(o)	\
	main.$(o)	\
	one_file.$(o)	\
	opcode.$(o)	\
	pvanal.$(o)	\
	pvlook.$(o)	\
	sndinfo.$(o)	\
	scot.$(o)

COBJO = \
	aops.$(o)	\
	cmath.$(o)	\
	control.$(o)	\
	diskin.$(o)	\
	disprep.$(o)	\
	dnfft.$(o)	\
	dsputil.$(o)	\
	dumpf.$(o)	\
	fft.$(o)	\
	fout.$(o)	\
	lptrkfns.$(o)	\
	mididevice.$(o)	\
	midiinterop.$(o)	\
	midiops.$(o)	\
	midiout.$(o)	\
	midirecv.$(o)	\
	midisend.$(o)	\
	mxfft.$(o)	\
	oscils.$(o)	\
	pitch0.$(o)	\
	pstream.$(o)	\
	pvadd.$(o)	\
	pvfileio.$(o)	\
	pvinterp.$(o)	\
	pvoc.$(o)	\
	pvocext.$(o)	\
	pvread.$(o)	\
	pvsanal.$(o)	\
	pvxanal.$(o)	\
	schedule.$(o)	\
	sdif.$(o)	\
	sdif-mem.$(o)	\
	sndinfUG.$(o)	\
	ugens1.$(o)	\
	ugens2.$(o)	\
	ugens3.$(o)	\
	ugens4.$(o)	\
	ugens5.$(o)	\
	ugens6.$(o)	\
	ugens7.$(o)	\
	ugens8.$(o)	\
	ugens9.$(o)	\
	vbap.$(o)	\
	vbap_eight.$(o)	\
	vbap_four.$(o)	\
	vbap_sixteen.$(o)	\
	vbap_zak.$(o)	\
	vdelay.$(o)	\
	vpvoc.$(o)

COBJS =	$(COBJT) $(COBJI) $(COBJO) $(COBJE) $(WINOBJ) $(AUDOBJ) $(FLTKOBJ)

HDRS =  H/3Dug.h H/aiff.h H/aops.h H/bowed.h H/brass.h H/butter.h H/clarinet.h \
	H/cmath.h H/convolve.h H/cs.h H/cscore.h H/dam.h H/diskin.h \
	H/disprep.h H/dpwelib.h H/dsputil.h H/dumpf.h H/fft.h H/fhtfun.h \
	H/filter.h H/flute.h H/fm4op.h H/follow.h H/ftgen.h H/grain.h H/grain4.h \
	H/hrtferx.h H/ieee80.h H/insert.h H/lpc.h H/marimba.h H/midioops.h \
	H/midiops.h H/midiops2.h H/midiout.h H/modal4.h H/moog1.h H/nlfilt.h \
	H/oload.h H/physutil.h H/pluck.h H/prototyp.h H/ptrigtbl.h H/pvadd.h \
	H/pvinterp.h H/pvoc.h H/pvread.h H/repluck.h H/revsets.h H/scot.h \
	H/sfheader.h H/shaker.h H/singwave.h H/sndwarp.h H/sort.h H/soundio.h \
	H/spectra.h H/sysdep.h H/ugens1.h H/ugens2.h H/ugens3.h H/ugens4.h \
	H/ugens5.h H/ugens6.h H/ugens7.h H/ugens8.h H/ugens9.h H/ugensa.h \
	H/ugrw1.h H/ugrw2.h H/vdelay.h H/version.h H/vibraphn.h H/vpvoc.h \
	H/wave.h H/wavegde.h H/winEPS.h H/windin.h H/cwindow.h H/mandolin.h \
	H/space.h H/locsig.h H/dcblockr.h H/pvocext.h H/flanger.h H/lowpassr.h \
	H/uggab.h H/biquad.h H/schedule.h H/midiops3.h H/pitch.h H/text.h \
	H/ugsc.h H/fout.h H/sndinfUG.h H/scansyn.h H/sf.h H/sfont.h H/sfenum.h \
	H/sftype.h H/vbap.h H/control.h H/bowedbar.h H/phisem.h H/sdif.h \
	H/sdif-mem.h H/babo.h H/ugmoss.h H/bbcut.h H/spat3d.h H/pstream.h \
	H/pvfileio.h H/pvxanal.h H/oscbnk.h H/scansynx.h H/oscils.h \
	H/wave-terrain.h H/clfilt.h H/midiinterop.h H/opcode.h H/csdl.h \
	H/widgets.h H/namedins.h

PROGS   = csound
SUBDIRS = anals utils1 utils2 utils3
LIBRARIES = opcodes

all:		$(PROGS) $(SUBDIRS) $(LIBRARIES)	#must be run in this order

csound:		$(COBJS) $(CSUM) $(CDEP) csound.xmg
		$(CC) $(CFLAGS) -o csound $(COBJS) $(LIBS)

TAGS:	$(CSRCS) $(HDRS)
		etags $(CSRCS) $(HDRS)
		(cd Opcodes; $(MAKE) TAGS)

csound.a:	$(COBJS) $(CDEP)
		-rm csound.a
		ar q csound.a $(COBS)
		-@RANLIB@ csound.a

xmg:	American.xmg English.xmg csound.xmg

American.xmg:	strings/all_strings makedb
	./makedb strings/all_strings American

English.xmg:	strings/english-strings makedb
	./makedb strings/english-strings English

csound.xmg:	strings/all_strings English.xmg
	cp English.xmg csound.xmg
#	cp American.xmg csound.xmg

makedb:	strings/makedb.c H/text.h
	$(CC) -I H -o makedb strings/makedb.c

$(AUDOBJ): $(AUDSRC)
	$(CC) $(CFLAGS) -I H -c $I/$*.c -o $*.$(o)

$(COBJE): $(CSRCE)
	$(CC) $(CFLAGS) -I H -c $E/$*.c -o $*.$(o)

$(COBJT): $(CSRCT)
	$(CC) $(CFLAGS) -I H -c $T/$*.c -o $*.$(o)

$(COBJI): $(CSRCI)
	$(CC) $(CFLAGS) -I H -c $I/$*.c -o $*.$(o)

$(COBJO): $(CSRCO)
	$(CC) $(CFLAGS) -I H -c $O/$*.c -o $*.$(o)

.c.$(o):
	$(CC) $(CFLAGS) -I H -c $*.c -o $*.$(o)

ADSYNS = hetro 						#targets in anal/adsyn
LPCS = lpanal						#targets in anal/lpc
PVOCS = pvanal 						#targets in anal/pvoc
CVL = cvanal						#targets in anal/convol
#targets in anal
ANALS = adsyns $(ADSYNS) lpcs $(LPCS) pvocs $(PVOCS) cvl $(CVL)
anals $(ANALS):
		cd anal; $(MAKE) $@

SCOTS = scots						#targets in util1/scot
CSCORES = cscores					#targets in util1/cscore
SORTEXS = scsort extract				#targets in util1/sortex
UTILS1 = $(SCOTS) $(CSCORES) sortexs $(SORTEXS)		#targets in util1
utils1 $(UTILS1): natben.$(o)
		cd util1; $(MAKE) $@

UTILS2 = sndinfos scale mixers extractor envelope pvlook dnoise srconv #targets in util2
utils2 $(UTILS2):
		cd util2; $(MAKE) $@

UTIL3 = sdif2adsyn.c $O/sdif.c $O/sdif-mem.c

UTILS3 = sdif2ad
utils3: $(UTILS3)

opcodes:
	(cd Opcodes; $(MAKE) $@)

sdif2ad: sdif2adsyn.$(o) sdif.$(o) sdif-mem.$(o)
	$(CC) -I H sdif2adsyn.$(o) sdif.$(o) sdif-mem.$(o) -o sdif2ad

install:	$(PROGS) $(CSA) csound.a sdif2ad
		-strip $(PROGS)
		-rm $(DEST)/csound
		cp $(PROGS) $(DEST)
		-rm $(LIB)/libcsound.a
		-cp csound.a $(LIB)/libcsound.a
		cd anal; $(MAKE) install
		cd util1; $(MAKE) install
		cd util2; $(MAKE) install
		-cp sdif2ad $(DEST)/sdif2ad
#		cd util3; $(MAKE) install

MANPP = csound hetro lpanal pvanal
manpp:
		-for i in $(MANPP); do rm -f $(CAT1)/$$i.1; done
		-for i in $(MANPP); do cp man/$$i.man $(MAN1)/$$i.1; done

clean:
		-rm $(COBS) cscormai.$(o) dmain.$(o) $(PROGS) $(CSA) dsound *.s
		cd anal; $(MAKE) clean
		cd util1; $(MAKE) clean
		cd util2; $(MAKE) clean
		cd testfils; rm -f core score.srt score.xtr
		cd tutofils; rm -f core score.srt score.xtr
		cd scorfils; rm -f core score.srt score.xtr
		cd morefils; rm -f core score.srt score.xtr
		cd midifils; rm -f core score.srt score.xtr
		cd analfils; rm -f core pv.medlab
		cd cscofils; rm -f core cscore csound *.$(o) *.out *.srt

rmbak:
		-rm *.bak *~
		cd anal; $(MAKE) rmbak
		cd util1; $(MAKE) rmbak
		cd util2; $(MAKE) rmbak
		cd man; rm -f *.bak *~
		cd testfils; rm -f *.bak *~
		cd tutofils; rm -f *.bak *~
		cd scorfils; rm -f *.bak *~
		cd morefils; rm -f *.bak *~
		cd midifils; rm -f *.bak *~
		cd cscofils; rm -f *.bak *~

CSLinux.bin.tgz: /usr/local/bin/csound /usr/local/bin/hetro \
	/usr/local/bin/lpanal /usr/local/bin/pvanal /usr/local/bin/scot \
	/usr/local/bin/scsort /usr/local/bin/extract /usr/local/bin/sndinfo \
	/usr/local/bin/scale /usr/local/bin/mixer /usr/local/bin/extractor \
	/usr/local/bin/envext /usr/local/bin/pvlook /usr/local/bin/sdif2ad \
	/usr/local/bin/dnoise /usr/local/bin/srconv
	(cd /usr/local/bin; tar cvzf ~/csound/CSLinux.bin.tgz csound \
	hetro lpanal pvanal scot scsort extract sndinfo scale mixer \
	extractor envext pvlook sdif2ad dnoise srconv)

Csound.tar.gz:  all_files \
	$(<CSRCS) $(HDRS) \
	LINUXaudio.c DECaudio.c DECplay.c HPplay.c DECaudio.h \
	DECplay.h SGIplay.c anal/adsyn/main.c anal/adsyn/makef anal/lpc/main.c \
	anal/lpc/makef anal/makef anal/makef anal/pvoc/main.c anal/pvoc/makef \
	Makefile.sol cscofils/combine.c cscofils/default.c cscofils/pulse.c \
	cscofils/sine.orc cscofils/sine.sco cscofils/switch.c cscofils/test.c \
	cscofils/test2.c cscofils/README cscofils/aliases cscormai.c Makefile \
	util1/cscore/makef util1/makef util1/scot/main.c util1/scot/makef \
	util1/sortex/makef util1/sortex/smain.c util1/sortex/xmain.c \
	util2/envext/envext.c util2/envext/makef util2/exports/Makefile \
	util2/exports/het_export.c util2/exports/het_import.c \
	util2/exports/lpc_export.c util2/exports/pv_export.c \
	util2/exports/pv_import.c util2/makef util2/mixer/makef \
	util2/mixer/mixer.c util2/mixer/xtrct.c util2/mkgraph/fg.h \
	util2/mkgraph/fgdemo.c util2/mkgraph/mkgraph.c util2/scale.dir/makef \
	util2/scale.dir/scale.c util2/sndinfo/main.c \
	util2/sndinfo/makef util2/pvlook.dir/makef winSGI.c winbor.c winwat.c winfg.c
		tar cvf - `cat all_files` | gzip > Csound.tar.gz

distrib:	all Csound.tar.gz
	cp MUSIC/csound/Csound.tar.gz ~ftp/pub/dream
	cp MUSIC/csound/csound ~ftp/pub/dream/SGI
	cp MUSIC/csound/anal/hetro ~ftp/pub/dream/SGI
	cp MUSIC/csound/anal/lpanal ~ftp/pub/dream/SGI
	cp MUSIC/csound/anal/pvanal ~ftp/pub/dream/SGI
	cp MUSIC/csound/util1/scot/scot ~ftp/pub/dream/SGI
	cp MUSIC/csound/util1/cscore/cscore.a ~ftp/pub/dream/SGI
	cp MUSIC/csound/util1/sortex/extract ~ftp/pub/dream/SGI
	cp MUSIC/csound/util1/sortex/scsort ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/envext/envext ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/exports/het_import ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/exports/het_export ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/exports/pv_import ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/exports/pv_export ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/exports/lpc_export ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/mixer/mixer ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/mixer/extractot ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/scale.dir/scale ~ftp/pub/dream/SGI
	cp MUSIC/csound/util2/sndinfo/sndinfo ~ftp/pub/dream/SGI

depend:
	@CC@ -M -I H $(CFLAGS) $(CSRCS) $(CSRMS) $(UTIL3) > deps
	cat Makefile deps > makefile

# DO NOT DELETE THIS LINE
