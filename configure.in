#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
AC_INIT(Csound, 4.24, csound-bug@cs.bath.ac.uk)
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([Top/main.c])
AC_CONFIG_HEADER([H/config.h])
AC_CANONICAL_SYSTEM
LDFLAGS="-L/usr/lib -L/usr/X11R6/lib -L/usr/local/lib"

# Checks for programs.
AC_PROG_CXX
dnl Add warning when using G++
if test "X$GXX" = Xyes ; then
  CXXFLAGS="$CXXFLAGS -Wall"
fi
AC_PROG_CC
dnl Add warning when using GGG
if test "X$GCC" = Xyes ; then
  CFLAGS="$CFLAGS -Wall"
fi
AM_PROG_CC_STDC
#AC_PROG_YACC
#AC_PROG_LEX
#AC_PROG_INSTALL
#AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_PATH_X
AC_PATH_XTRA

# Checks for libraries.
AC_CHECK_LIB([c], [fopen])
AC_CHECK_LIB([dl], [dlsym])
AC_CHECK_LIB([asound], [snd_pcm_hw_params_any])
# FIXME: Replace `main' with a function in `-lbsd':
#AC_CHECK_LIB([bsd], [main])

# Next line is for SGI library `-laudio'
AC_CHECK_LIB([audio], [ALsetparams])
# Next line is for SUN library `-laudio'
AC_CHECK_LIB([audio], [audioSetDevInfo])
# on HP, to include rt devaudio library
AC_CHECK_LIB([Alib], [AOpenAudio])
#  NeXT midi support
AC_CHECK_LIB([midi], [midi_set_owner])
#AC_CHECK_LIB([pthread], [])
AC_CHECK_LIB([portaudio], [Pa_Initialize])
AC_CHECK_LIB([X11], [XOpenDisplay])

# Checks for header files.
AC_FUNC_ALLOCA
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([OS.h arpa/inet.h fcntl.h limits.h malloc.h memory.h netdb.h netinet/in.h sgtty.h bsd/sgtty.h stddef.h stdlib.h string.h strings.h sys/file.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h termios.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE
AC_C_BIGENDIAN

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit bzero dup2 getcwd gethostbyname gettimeofday memmove memset modf putenv rint select socket strchr strdup strerror strrchr strstr strtol strtoul])
AC_CHECK_FUNC(popen, AC_DEFINE(PIPES))

AC_ARG_ENABLE(windows,
        AC_HELP_STRING([--enable-windows],
                [enables graphical display of waveforms default=yes]),
        [WINDOWS="$enableval"],
	[WINDOWS='yes'])

AC_ARG_ENABLE(gui,
	AC_HELP_STRING([--enable-gui],
		[enables graphical user interface components (platform dependant)  default=no]),
	[USE_GUI="$enableval"],
	[USE_GUI='no'])

AC_ARG_ENABLE(rtaudio,
	AC_HELP_STRING([--enable-rtaudio],
		[enables real-time audio default=yes]),
	[USE_RTAUDIO="$enableval"],
	[USE_RTAUDIO=yes])


AC_ARG_ENABLE(sf-ircam,
	[AC_HELP_STRING([--enable-sf-ircam],
		[enable reading/writing IRCAM-format sound files, with 1024-byte header (default YES)])],
	[USE_IRCAM=$enableval],
	[USE_IRCAM=yes])


AC_ARG_ENABLE(sf-sun41,
	AC_HELP_STRING([--enable-sf-sun41],
		[enable reading/writing SUN4.1-format soundfiles, with their own header default=no]),
	[USE_SUN41=$enableval],
	[USE_SUN41=no])


AC_ARG_ENABLE(sf-NeXT,
	AC_HELP_STRING([--enable-sf-NeXT],
		[enable reading/writing SUN4.1-format soundfiles, with their own header default=no]),
	USE_NeXT=$enableval,
	USE_NeXT=no)

AC_ARG_WITH(fltk,
	AC_HELP_STRING([--with-fltk],
	               [enables the use of the fltk windowing toolkit (http://www.fltk.org/) (over the local window msystem) if fltk can be found default=yes]),
	USE_FLTK=$withval,
	USE_FLTK=yes)

AC_ARG_WITH(gui,
	AC_HELP_STRING([--with-gui],
	               [enables the use of the fltk rt-gui default=yes]),
	USE_GUI=$withval,
	USE_GUI=yes)

AC_ARG_WITH(tcltk,
	AC_HELP_STRING([--with-tcltk],
	               [enables the use of the Tcl/tk ( default YES)]),
	[USE_TCLTK=$withval],
	[USE_TCLTK=yes])

AC_ARG_WITH(gcc3,
	AC_HELP_STRING([--with-gcc3],
		       [use gcc3 style CFLAGS (default no)]),
	[USE_GCC3_FLAGS=$withval],
	[USE_GCC3_FLAGS=no])

case $host in 
     *irix*) 
	     RTAUDIO_SRC="InOut/rtSGI.c InOut/SGIplay.c"
	     RTAUDIO_OBJS="rtSGI.$ac_objext SGIplay.$ac_objext"
             RTAUDIO_HDR=
	     AC_DEFINE(SGI)
	     GRAPHING_SRC="InOut/winX11.c"
	     GRAPHING_OBJS="winX11.$ac_objext"
             XCFLAGS=""
	     ;;

     *sun*)
	     RTAUDIO_SRC="InOut/rtSUN.c"
	     RTAUDIO_OBJS="rtSUN.$ac_objext"
             RTAUDIO_HDR=
	     AC_DEFINE(sun)
	     GRAPHING_SRC="InOut/winX11.c"
	     GRAPHING_OBJS="winX11.$ac_objext"
             XCFLAGS="-ffpa"
	     ;;

     *-*-msdos* | *-*-go32* | *-*-mingw32* | *-*-cygwin* | *-*-windows*)
             RTAUDIO_OBJS="rtpa.$ac_objext pablio.$ac_objext ringbuffer.$ac_objext"
	     AC_DEFINE(WIN32)
	     ;;

     *linux*)
             AC_DEFINE(LINUX)
             RTAUDIO_SRC="InOut/rtpa.c InOut/pablio.c InOut/ringbuffer.c"
             RTAUDIO_OBJS="rtpa.$ac_objext pablio.$ac_objext ringbuffer.$ac_objext"
             RTAUDIO_HDR=
	     if test "$WORDS_BIG_ENDIAN"; then
		AC_DEFINE(LINUX_BE)
	     fi
             if test "$WINDOWS" = yes; then
                 if test "$USE_FLTK" = yes; then
             	     GRAPHING_SRC="InOut/winFLTK.c InOut/FL_graph.cpp"
                     GRAPHING_OBJS="winFLTK.o FL_graph.o"
                     AC_HAVE_LIBRARY(fltk)
                     AC_HAVE_LIBRARY(pthread)
                 else
             	     GRAPHING_SRC="InOut/winX11.c"
                     GRAPHING_OBJS="winX11.$ac_objext"
                 fi
             else
                GRAPHING_SRC=
                GRAPHING_OBJS=
             fi
		

	     if test "$USE_GCC3_FLAGS" = yes; then
		ALIGN_FLAGS="-falign-loops=4 -falign-jumps=4"
             else
		ALIGN_FLAGS="-malign-loops=4 -malign-jumps=4"
	     fi

             XCFLAGS="-Wall $ALIGN_FLAGS -ffast-math -fomit-frame-pointer -finline-functions -funroll-loops -DWITHx87"
	     ;;
     *dec*)
             AC_DEFINE(DEC)
             RTAUDIO_SRC="InOut/rtDEC.c InOut/DECaudio.c InOut/DECplay.c"
             RTAUDIO_OBJS="rtDEC.$ac_objext DECaudio.$ac_objext DECplay.$ac_objext"
             RTAUDIO_HDR="H/DECplay.h"
             XCFLAGS=""
	     ;;
     *hp*)
             AC_DEFINE(HP)
             RTAUDIO_SRC="InOut/rtDEC.c InOut/DECaudio.c InOut/DECplay.c"
             RTAUDIO_OBJS="rtDEC.$ac_objext DECaudio.$ac_objext DECplay.$ac_objext"
             RTAUDIO_HDR=""
             XCFLAGS="-Aa +e +x"
	     ;;
     *)
      AC_MSG_WARN($host)
      AC_MSG_WARN([ Unable to configure for your system automatically ])
      ;;

esac

if test "$USE_RTAUDIO" = yes; then
   if test "$RTAUDIO_OBJS"; then
      AC_DEFINE(RTAUDIO)
      AUDOBJ="$RTAUDIO_OBJS"
      AUDSRC="$RTAUDIO_SRC"
      AUDHDR="$RTAUDIO_HDR"
      AUDLIBS="$RTAUDIO_LIBS"
   else
      AC_MSG_WARN([You asked for RTAUDIO, but no suitable driver was found])
   fi
fi

AUDIO_FORMATS=""
if test "$USE_IRCAM" = yes; then
   AC_DEFINE(IRCAM)
   echo "Using ircam"
   AUDIO_FORMATS="$AUDIO_FORMATS IRCAM"
fi

if test "$USE_SUN41" = yes; then
   AC_DEFINE(SUN41)
   AUDIO_FORMATS="$AUDIO_FORMATS SUN41"

fi

if test "$USE_NeXT" = yes; then
   AC_DEFINE(NeXT)
   AUDIO_FORMATS="$AUDIO_FORMATS NeXT"
fi

if test "$USE_TCLTK" = yes; then
   AC_CHECK_PROG(TCLTK,wish)
   AC_DEFINE(TCLTK)
fi

if test "$WINDOWS" = yes; then
   if test "$GRAPHING_OBJS"; then
      AC_DEFINE(WINDOWS)
      WINOBJ="$GRAPHING_OBJS"
      WINSRC="$GRAPHING_SRC"
   else
      AC_MSG_WARN([You asked for graphing, but no suitable system found])
   fi
   
fi

if test "$USE_GUI" = yes; then
	FLTKOBJ="widgets.$ac_objext"
	FLTKSRC="InOut/widgets.cpp"
     
	AC_PATH_PROG(FLTK_CONFIG,fltk-config)
	AC_LANG_CPLUSPLUS
	AC_LANG_C

	WINLDFLAGS=`$FLTK_CONFIG --ldflags` 
	WINLDFLAGS="$WINLDFLAGS -lpthread -lstdc++"
	WINCXXFLAGS=`$FLTK_CONFIG --cxxflags`
     	AC_DEFINE(HAVE_FLTK)

	AC_CHECK_LIB([pthread], [pthread_mutex_lock])
fi
AC_CHECK_LIB([m], [sin])

AC_SUBST(XCFLAGS)
AC_SUBST(WINSRC)
AC_SUBST(WINOBJ)
AC_SUBST(AUDOBJ)
AC_SUBST(AUDSRC)
AC_SUBST(AUDHDR)
AC_SUBST(AUDLIBS)
AC_SUBST(FLTKSRC)
AC_SUBST(FLTKOBJ)
AC_SUBST(WINLDFLAGS)
AC_SUBST(WINCXXFLAGS)


AC_OUTPUT(Makefile Opcodes/Makefile anal/Makefile util1/Makefile util2/Makefile \
          anal/adsyn/Makefile anal/convol/Makefile anal/lpc/Makefile \
          anal/pvoc/Makefile util1/cscore/Makefile util1/scot/Makefile \
          util1/sortex/Makefile util2/dnoise.dir/Makefile util2/envext/Makefile \
          util2/exports/Makefile util2/mixer/Makefile util2/pvlook.dir/Makefile \
          util2/scale.dir/Makefile util2/sndinfo/Makefile,
	  csound.spec)

echo
echo "Configuration Summary"
echo "----------------------"

if test "$RTAUDIO"; then 
echo "RTAUDIO Support: $AUDOBJ";
else
echo "RTAUDIO Support: Disabled ($AUDOBJ)"
fi

if test "$WINDOWS"; then 
echo "Graphing Support: $WINOBJ"
else
echo "Graphing Support: Disabled"
fi

if test "$USE_GUI" = yes; then 
echo "GUI Support: enabled"
else
echo "GUI Support: Disabled"
fi

echo "Audio Formats suported: WAV  AIFF $AUDIO_FORMATS"
